---
- name: Deploy the IDM servers
  hosts: localhost
  connection: local
  become: no
  gather_facts: no
  vars:
    stack_name: idm-service
    domain_name: example.com
    flavor: m1.small
    contact: admin@{{ domain_name }}
    external_network: public
    dns_forwarders: [10.16.36.29,10.11.5.19]
    image: rhel73
    ssh_key_name: AnsibleTower
    config_file: "{{ lookup('env', 'OS_CLIENT_CONFIG_FILE') }}"
    ssh_user: cloud-user
    rhn_username: mamorim1@redhat.com
    rhn_pool: 8a85f9874011071c01407da00b997cb2
    rhn_password: XXXXXXX

  tasks:
    - name: check config file
      stat: path={{ config_file }}
      register: st

    # if the config_file does not exist, we need the external variable to connect to OpenStack
    - name: include config file from openstack when using tower
      include_vars: "{{ config_file }}"
      when: st.stat.exists and st.stat.isreg

    - name: Check whether the stack exists already
      command: >
        openstack --os-auth-url '{{ clouds.devstack.auth.auth_url }}'
        --os-password '{{ clouds.devstack.auth.password }}'
        --os-username '{{ clouds.devstack.auth.username }}'
        --os-project-name '{{ clouds.devstack.auth.project_name}}'
        stack show {{ stack_name }}
      register: stack_check
      ignore_errors: True

    - name: Create the Heat Stack
      os_stack:
        name: "{{ stack_name }}"
        template: heat/idm_service.yaml
        auth_type: password
        auth: "{{ clouds.devstack.auth }}"
        parameters:
          domain_name: "{{ domain_name }}"
          external_network: "{{ external_network }}"
          ssh_key_name: "{{ ssh_key_name }}"
          dns_forwarders: "{{ dns_forwarders }}"
          image: "{{ image }}"
          flavor: "{{ flavor }}"
      register: stack_output
      when: stack_check.rc != 0

    - name: Register stack output
      command: >
        openstack --os-auth-url '{{ clouds.devstack.auth.auth_url }}'
        --os-password '{{ clouds.devstack.auth.password }}'
        --os-username '{{ clouds.devstack.auth.username }}'
        --os-project-name '{{ clouds.devstack.auth.project_name}}'
        stack output show -f value -c output_value
        {{ stack_name }} ip_address
      register: stack_output_raw

    - set_fact:
        stack_output: "{{ stack_output_raw.stdout|from_json }}"

    - name: Add the idm to the inventory
      add_host:
        name: "{{ stack_output.master.address }}"
        groups: idm
        zone: "{{ domain_name }}"
        masters: [" {{ stack_output.master.name }} "]
        contact: "{{ contact }}"
        rhn_username: "{{ rhn_username }}"
        rhn_password: "{{ rhn_password }}"
        rhn_pool: "{{ rhn_pool }}"
        nameservers: "{{ [stack_output.master] }}"
        ansible_user: "{{ ssh_user }}"
        idm_hostname: "{{ ipa_packages|default('idm-master') }}"
        domain_name: "{{ domain_name|default('example.com') }}"
        idm_admin_password: "{{ idm_admin_password|default('redhat@123') }}"
        dns_forwarders: "{{ dns_forwarders|default('8.8.8.8') }}"

    # TODO: develop a best way to wait to server be reachable
    - name: Wait for 30 seconds to system become reachable
      wait_for:
        host: "{{ item }}"
        port: 22
        delay: 30
      with_items: "{{ groups['all'] }}"

- hosts: all
  become: true
  tasks:
    # TODO: Replace to module redhat_subscription
    - name: check if already registred to RHN
      command: >
        subscription-manager identity
      register: registred
      ignore_errors: true
      when: rhn_username|default and rhn_password|default and rhn_pool|default

    - name: Subscribe to RHN
      command: >
        subscription-manager register
        --username {{ rhn_username }}
        --password '{{ rhn_password }}'
        --serverurl https://subscription.rhn.redhat.com
        --force
      register: register_rhn
      when: rhn_username|default and rhn_password|default and rhn_pool|default and registred.rc != 0

    - name: Attach to pool
      command: >
        subscription-manager attach
        --pool {{ rhn_pool }}
      when: registred.rc != 0

- include: ansible/idm-server.yaml

