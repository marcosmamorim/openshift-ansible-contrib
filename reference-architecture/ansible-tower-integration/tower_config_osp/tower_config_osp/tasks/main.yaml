---

- name: Install pip
  yum:
    name: python2-pip
    state: present
  become: true

- name: Install git
  yum:
    name: git
    state: present
  become: true

- name: Install Tower CLI
  pip:
    name: ansible-tower-cli
  become: true

- name: Install ManageIQ module
  pip:
    name: manageiq-client
  become: true

- name: Install python2-boto
  yum:
    name: python2-boto
    state: present
  become: true

- name: Install pyOpenSSL
  yum:
    name: pyOpenSSL
    state: present
  become: true

- name: Install python-netaddr
  yum:
    name: python-netaddr
    state: present
  become: true

- name: Install python-six
  yum:
    name: python-six
    state: present
  become: true

- name: Install python2-boto3
  yum:
    name: python2-boto3
    state: present
  become: true

- name: Install python-click
  yum:
    name: python-click
    state: present
  become: true

- name: Install python-httplib2
  yum:
    name: python-httplib2
    state: present
  become: true

- name: Install python-openstackclient
  yum:
    name: python-openstackclient
    state: present
  become: true

- name: Install bind-utils
  yum:
    name: bind-utils
    state: present
  become: true

#TODO: Create tower_cli.cfg before start the Tower configuration
- name: create tower cli configuration file
  template:
    source: tower_cli.cfg.j2
    dest: /root/.tower_cli.cfg
    mode: 0640

- name: Create tower organization
  tower_organization:
    name: "Default"
    description: "Set to Default since the trial license only allows one organization. You can change it if you have deep pockets"
    state: present

- name: Add tower project for openshift-ansible-contrib
  tower_project:
    name: "openshift-ansible-contrib"
    description: "sync openshift-ansible-contrib"
    organization: "Default"
    scm_url: https://github.com/marcosmamorim/openshift-ansible-contrib.git
    scm_type: git
    scm_branch: tower-osp
    scm_update_on_launch: true
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Add tower project for openshift-on-openstack
  tower_project:
    name: "openshift-on-openstack"
    description: "sync openshift-on-openstack"
    organization: "Default"
    scm_url: https://github.com/marcosmamorim/openshift-on-openstack.git
    scm_type: git
    scm_branch: mamorim
    scm_update_on_launch: true
    state: present
    tower_config_file: "~/.tower_cli.cfg"

#- name: Add tower project for ansible-redhat-access-insights-client
#  tower_project:
#    name: "ansible-redhat-access-insights-client"
#    description: "sync ansible-redhat-access-insights-client"
#    organization: "Default"
#    scm_url: https://github.com/strategicdesignteam/ansible-redhat-access-insights-client.git
#    scm_type: git
#    scm_branch: master
#    scm_update_on_launch: true
#    state: present
#    tower_config_file: "~/.tower_cli.cfg"

#- name: Add tower project for cfme-ansible
#  tower_project:
#    name: "cfme-ansible"
#    description: "sync cfme-ansible"
#    organization: "Default"
#    scm_url: https://github.com/strategicdesignteam/cfme-ansible.git
#    scm_type: git
#    scm_branch: master
#    scm_update_on_launch: true
#    state: present
#    tower_config_file: "~/.tower_cli.cfg"

- name: Sync project openshift-ansible-contrib
  command: tower-cli project update -n openshift-ansible-contrib

- name: Sync project openshift-on-openstack
  command: tower-cli project update -n openshift-on-openstack

#- name: Sync project ansible-redhat-access-insights-client
#  command: tower-cli project update -n ansible-redhat-access-insights-client
#
#- name: Sync project cfme-ansible
#  command: tower-cli project update -n cfme-ansible

- name: Add tower credential for machine
  tower_credential:
    name: osp-privkey
    kind: ssh
    become_method: sudo
    description: osp-privkey
    organization: "Default"
    state: present
    ssh_key_data: "{{ OS_MACHINE_KEY }}"
    username: cloud-user
    tower_config_file: "~/.tower_cli.cfg"

- name: Add tower credential for osp
  tower_credential:
    name: openstack
    kind: openstack
    description: OpenStack
    organization: "Default"
    state: present
    username: "{{ OS_USERNAME }}"
    password: "{{ OS_PASSWORD }}"
    project: "{{ OS_PROJECT_NAME }}"
    host: "{{ OS_AUTH_URL }}"
    tower_config_file: "~/.tower_cli.cfg"

- name: Add OCP tower inventory
  tower_inventory:
    name: "osp-inventory"
    description: "Tower inventory for OSP"
    organization: "Default"
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Add IDM tower inventory
  tower_inventory:
    name: "idm-inventory"
    description: "Tower inventory for IDM"
    organization: "Default"
    state: present
    tower_config_file: "~/.tower_cli.cfg"
    variables:
      domain_name: example.com
      idm_hostname: idm-master
      dns_forwarders: 8.8.8.8
      ansible_user: cloud-user
      idm_admin_password: redhat@123
      external_network: publica
      ssh_key_name: AnsibleTower
      ssh_user: cloud-user
      image: template-rhel7.3
      idm_flavor: small.1GB
      ipa_packages:
        - ipa-server
        - ipa-server-dns
        - bind
        - bind-dyndb-ldap
        - deltarpm

- name: Add OSP Tower group
  tower_group:
    name: osp
    description: "Tower Group for OSP"
    source: openstack
    credential: openstack
    inventory: "osp-inventory"
    variables:
      domain_name: example.com
      idm_hostname: idm-master
      dns_forwarders: 8.8.8.8
      ansible_user: cloud-user
      idm_admin_password: redhat@123
      external_network: publica
      ssh_key_name: AnsibleTower
      ssh_user: cloud-user
      image: template-rhel7.3
      idm_flavor: small.1GB
      ipa_packages:
        - ipa-server
        - ipa-server-dns
        - bind
        - bind-dyndb-ldap
        - deltarpm

- name: Add IDM Tower group
  tower_group:
    name: idm
    description: "Tower Group for IDM on OSP"
    source: openstack
    credential: openstack
    inventory: "idm-inventory"
    state: present
    tower_config_file: "~/.tower_cli.cfg"

- name: Get Inventory Source ID
  shell: curl -s -k -u {{ TOWER_USER }}:{{ TOWER_PASSWORD }} https://{{ TOWER_HOSTNAME }}/api/v1/inventory_sources/ | python -m json.tool | grep -m 1 id |awk -F":" '{print $2}' |awk -F"," '{print $1}' |sed 's/^[ \t]*//;s/[ \t]*$//'
  register: myoutput

- name: Create osp-idm job template
  become: true
  tower_job_template:
    name: osp-idm-install
    job_type: run
    inventory: idm-inventory
    project: openshift-ansible-contrib
    playbook: "reference-architecture/osp-idm/ansible/idm-server.yaml"
    machine_credential: osp-privkey
    cloud_credential: openstack
    state: present
    tower_config_file: "~/.tower_cli.cfg"

#- name: Create osp-infrastructure job template
#  become: true
#  tower_job_template:
#    name: osp-infrastructure
#    job_type: run
#    inventory: osp-inventory
#    project: openshift-ansible-contrib
#    playbook: "reference-architecture/aws-ansible/playbooks/infrastructure.yaml"
#    machine_credential: osp-privkey
#    cloud_credential: openstack
#    state: present
#    tower_config_file: "~/.tower_cli.cfg"
#
#- name: Create openshift_create_httpd_file job template
#  tower_job_template:
#    name: create_httpd_file
#    job_type: run
#    inventory: osp-inventory
#    project: openshift-ansible-contrib
#    playbook: "reference-architecture/ansible-tower-integration/create_httpd_file/create_httpd_file.yaml"
#    machine_credential: osp-privkey
#    cloud_credential: openstack
#    state: present
#    tower_config_file: "~/.tower_cli.cfg"
#
#- name: Create redhat-access-insights client job template
#  tower_job_template:
#    name: redhat-access-insights-client
#    job_type: run
#    inventory: osp-inventory
#    become_enabled: yes
#    project: ansible-redhat-access-insights-client
#    playbook: "redhat-access-insights-client.yaml"
#    machine_credential: osp-privkey
#    cloud_credential: openstack
#    state: present
#    tower_config_file: "~/.tower_cli.cfg"
#
## TODO: create osp-ansible to install on OpenStack
##- name: Create osp-openshift-install job template
##  tower_job_template:
##    name: osp-openshift-install
##    job_type: run
##    inventory: osp-inventory
##    become_enabled: yes
##    project: openshift-ansible-contrib
##    playbook: "reference-architecture/aws-ansible/playbooks/openshift-install.yaml"
##    machine_credential: osp-privkey
##    cloud_credential: openstack
##    state: present
##    tower_config_file: "~/.tower_cli.cfg"
#
#- name: Create osp-openshift-cfme-install job template
#  tower_job_template:
#    name: osp-openshift-cfme-install
#    job_type: run
#    inventory: osp-inventory
#    become_enabled: no
#    project: cfme-ansible
#    playbook: "cfme_ose_install.yaml"
#    machine_credential: osp-privkey
#    cloud_credential: openstack
#    state: present
#    tower_config_file: "~/.tower_cli.cfg"
#
#- name: Create osp-openshift-cfme-ocp-provider job template
#  tower_job_template:
#    name: osp-openshift-cfme-ocp-provider
#    job_type: run
#    inventory: osp-inventory
#    become_enabled: no
#    project: cfme-ansible
#    playbook: "cfme_ose_osp_provision.yaml"
#    machine_credential: osp-privkey
#    cloud_credential: openstack
#    state: present
#    tower_config_file: "~/.tower_cli.cfg"
#
#- name: Create workflow-ocp-osp-install
#  command: tower-cli workflow create --name="workflow-ocp-osp-install" --organization="Default" --description="A workflow for deploying OCP on OSP" -e @workflow-ocp-osp-install-extravars.yaml
#
#- name: Replace inventory source
#  lineinfile:
#    path: schema.yml
#    regexp: 'REPLACEME'
#    line: 'osp (osp-inventory - {{ myoutput.stdout }})'
#
#- name: Replace inventory source second time
#  lineinfile:
#    path: schema.yml
#    regexp: 'ONEMORETIME'
#    line: 'osp (osp-inventory - {{ myoutput.stdout }})'
#
#- name: Create a schema for workflow-ocp-osp-install
#  command: tower-cli workflow schema workflow-ocp-osp-install @schema.yml
#
#- name: Reset schema file in case we run again, again
#  lineinfile:
#    path: schema.yml
#    regexp: '^(.*)inventory_source'
#    line: '            - inventory_source: ONEMORETIME'
#
#- name: Reset schema file in case we run again
#  lineinfile:
#    path: schema.yml
#    regexp: '^(.*)inventory_source.*(?<!\ONEMORETIME)$'
#    line: '  - inventory_source: REPLACEME'
